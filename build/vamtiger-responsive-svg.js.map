{"version":3,"file":"vamtiger-responsive-svg.js","sources":["../source/types.ts","../source/config.ts","../source/css/document-index.ts","../source/html/index.ts","../source/get-template.ts","../source/load-svg.ts","../source/element.ts","../source/vamtiger-responsive-svg.ts"],"sourcesContent":["import * as VamtigerBrowserMethodTypes from 'vamtiger-browser-method/build/types';\nimport VamtigerResponsiveSvg from './element';\n\nexport enum StringConstant {\n    nothing = ''\n}\n\nexport enum Selector {\n    style = 'style',\n    svg = 'svg',\n    slot = 'slot'\n}\n\nexport enum EventName {\n    svgLoaded = 'svgLoaded'\n}\n\nexport enum ObservedAttributes {\n\n}\n\nexport interface IGetTemplate {\n    selector: Selector;\n    attributes?: IAttributes;\n    properties?: IProperties;\n}\n\nexport interface IAttributes {\n    id?: string;\n    for?: string;\n    slot?: string;\n    name?: string;\n}\n\nexport interface IProperties {\n    innerHTML?: string;\n}\n\nexport interface ILoadSvg {\n    element: VamtigerResponsiveSvg;\n}\n\nexport interface IDataset extends DOMStringMap {\n    svg?: string;\n    jsonLd?: string;\n}\n\nexport interface IJosnLdImageObject {\n    \"@context\": string;\n    '@type': string;\n    name: string;\n    description: string;\n    author: {\n        '@type': string;\n        givenName: string;\n        familyName: string;\n        email: string;\n    };\n    datePublished: string;\n    contentUrl: string;\n}\n\nexport interface IData {\n    jsonLd: IJosnLdImageObject[],\n    json: {\n        template: string\n    }\n}\n\nexport type AttributesKey = keyof IAttributes;\n\nexport type ObservedAttribute = keyof typeof ObservedAttributes;\n\nexport type GetTemplate<P extends IGetTemplate> =\n    P['selector'] extends Selector.style ? HTMLStyleElement :\n    P['selector'] extends Selector.svg ? SVGElement :\n    P['selector'] extends Selector.slot ? HTMLSlotElement :\n    null;","import {\n    ObservedAttributes,\n    ObservedAttribute\n} from './types'\n\nexport const shadowRoot = {\n    mode: 'open'\n} as ShadowRootInit;\n\nexport const observedAttributes = Object.keys(ObservedAttributes) as ObservedAttribute[];","export default `vamtiger-responsive-svg [slot=vamtiger-responsive-svg]{width:100%;height:100%}\n/*# sourceMappingURL=document-index.ts.map */`;","export default `<slot></slot>`;","import {\n    IGetTemplate,\n    GetTemplate,\n    StringConstant,\n    AttributesKey\n} from './types';\nimport html from './html';\nimport css from './css';\n\nconst { nothing } = StringConstant;\nconst template = document.createElement('template');\nconst stylesheet = `<style>${css}</style>`\nconst templateHtml = [\n    stylesheet,\n    html\n].join(nothing);\n\ntemplate.innerHTML = templateHtml;\n\nexport default <P extends IGetTemplate>(params: P) => {\n    const {\n        selector,\n        attributes = {},\n        properties = {}\n    } = params;\n    const attributesKeys = Object.keys(attributes) as AttributesKey[]\n    const templateElement = template.content.querySelector(selector);\n    const currentTemplate = templateElement && templateElement.cloneNode(true) as GetTemplate<P>;\n\n    if (currentTemplate) {\n        Object.assign(currentTemplate, properties);\n\n        attributesKeys.forEach(key => attributes[key] && currentTemplate.setAttribute(key, attributes[key] || ''));\n    }\n\n    return currentTemplate;\n};","import {\n    ILoadSvg,\n    IDataset,\n    IData,\n    Selector,\n    StringConstant,\n    EventName\n} from './types';\nimport { name } from './element';\n\nconst { VamtigerBrowserMethod } = window;\nconst { getElement, getData } = VamtigerBrowserMethod;\nconst { nothing } = StringConstant;\nconst eventParams = {\n    bubbles: true\n};\n\nexport default async function ({ element }: ILoadSvg) {\n    const dataset = element.dataset as IDataset;\n    const { svg: svgUrl, jsonLd: jsonLdUrl } = dataset;\n    const { jsonLd, json } = (jsonLdUrl && await getData({ jsonLd: jsonLdUrl }) || { jsonLd: [], json: {}}) as IData;\n    const { template } = json || { template: ''};\n    const svg = jsonLdUrl && template && await getElement({\n            name: jsonLdUrl,\n            template,\n            selector: Selector.svg\n        })\n        ||\n        svgUrl && await getElement({\n            name: svgUrl,\n            url: svgUrl,\n            selector: Selector.svg\n        });\n    const svgLoadedEvent = new CustomEvent(\n        EventName.svgLoaded,\n        eventParams\n    );\n\n    if (svg) {\n        svg.slot = name;\n\n        element.appendChild(svg);\n\n        element.dataset.svgLoaded = nothing;\n\n        element.dispatchEvent(svgLoadedEvent);\n    }\n}\n","import {\n    Selector,\n    ObservedAttribute\n} from './types';\nimport {\n    shadowRoot as shadowRootConfig,\n    observedAttributes\n} from './config';\nimport css from './css/document-index';\nimport getTemplate from './get-template';\nimport loadSvg from './load-svg';\n\nconst { VamtigerBrowserMethod } = window;\nconst { loadScript } = VamtigerBrowserMethod;\nexport const name = 'vamtiger-responsive-svg';\n\ncss && loadScript({ name, css })\n    .catch(console.error);\n\nexport default class VamtigerResponsiveSvg extends HTMLElement {\n    constructor() {\n        super();\n\n        const shadowRoot = this.attachShadow(shadowRootConfig);\n        const stylesheet = getTemplate({\n            selector: Selector.style\n        });\n        const slot = getTemplate({\n            selector: Selector.slot,\n            attributes: {\n                name\n            }\n        });\n        const elements = [\n            stylesheet,\n            slot\n        ];\n\n        elements.forEach(element => element && shadowRoot.appendChild(element));\n    }\n\n    static get observedAttributes() {\n        return observedAttributes;\n    }\n\n    async connectedCallback() {\n        await loadSvg({\n            element: this\n        });\n    }\n\n    attributeChangedCallback(name: ObservedAttribute, oldValue: string, newValue: string) {\n\n    }\n}","import constructor, { name } from './element';\n\nconst { VamtigerBrowserMethod } = window;\nconst { defineCustomElement } = VamtigerBrowserMethod;\n\ndefineCustomElement({\n    name,\n    constructor\n});"],"names":["StringConstant","Selector","EventName","ObservedAttributes","shadowRoot","mode","observedAttributes","Object","keys","nothing","template","document","createElement","templateHtml","html","join","innerHTML","params","selector","attributes","properties","attributesKeys","templateElement","content","querySelector","currentTemplate","cloneNode","assign","forEach","key","setAttribute","VamtigerBrowserMethod","window","getElement","getData","eventParams","bubbles","loadScript","name","css","catch","console","error","defineCustomElement","HTMLElement","[object Object]","super","this","attachShadow","shadowRootConfig","getTemplate","style","slot","element","appendChild","dataset","svg","svgUrl","jsonLd","jsonLdUrl","json","url","svgLoadedEvent","CustomEvent","svgLoaded","dispatchEvent","loadSvg","oldValue","newValue"],"mappings":"yRAGA,IAAYA,EAIAC,EAMAC,EAIAC,GAdZ,SAAYH,GACRA,aADJ,CAAYA,IAAAA,OAIZ,SAAYC,GACRA,gBACAA,YACAA,cAHJ,CAAYA,IAAAA,OAMZ,SAAYC,GACRA,wBADJ,CAAYA,IAAAA,OAIAC,IAAAA,MCZL,MAAMC,GACTC,KAAM,QAGGC,EAAqBC,OAAOC,KAAKL,GCT9C,MAAe,kICAA,gBCSf,MAAMM,QAAEA,GAAYT,EACdU,EAAWC,SAASC,cAAc,YAElCC,GADa,qGAGfC,GACFC,KAAKN,GAEPC,EAASM,UAAYH,EAErB,MAAwCI,IACpC,MAAMC,SACFA,EAAQC,WACRA,KAAeC,WACfA,MACAH,EACEI,EAAiBd,OAAOC,KAAKW,GAC7BG,EAAkBZ,EAASa,QAAQC,cAAcN,GACjDO,EAAkBH,GAAmBA,EAAgBI,WAAU,GAQrE,OANID,IACAlB,OAAOoB,OAAOF,EAAiBL,GAE/BC,EAAeO,QAAQC,GAAOV,EAAWU,IAAQJ,EAAgBK,aAAaD,EAAKV,EAAWU,IAAQ,MAGnGJ,GCzBX,MAAMM,sBAAEA,GAA0BC,QAC5BC,WAAEA,EAAUC,QAAEA,GAAYH,WACxBtB,GAAYT,EACdmC,GACFC,SAAS,GCFb,4BAAQL,GAA0BC,QAC5BK,WAAEA,GAAeN,EACVO,EAAO,0BAEbD,GAAaC,KAAAA,EAAMC,IAAAA,IACrBC,MAAMC,QAAQC,OCfnB,4BAAQX,GAA0BC,QAC5BW,oBAAEA,GAAwBZ,EAEhCY,GACIL,KAAAA,4BDa+CM,YAC/CC,cACIC,QAEA,MAAM1C,EAAa2C,KAAKC,aAAaC,IAClBC,GACfhC,SAAUjB,EAASkD,QAEVD,GACThC,SAAUjB,EAASmD,KACnBjC,YACImB,KAAAA,MAQCV,QAAQyB,GAAWA,GAAWjD,EAAWkD,YAAYD,IAGlE/C,gCACI,OAAOA,EAGLuC,kED5BV,UAA+BQ,QAAEA,4CAC7B,MAAME,EAAUF,EAAQE,SAChBC,IAAKC,EAAQC,OAAQC,GAAcJ,GACrCG,OAAEA,EAAME,KAAEA,GAAUD,UAAmBzB,GAAUwB,OAAQC,OAAkBD,UAAYE,UACvFlD,SAAEA,GAAakD,IAAUlD,SAAU,IACnC8C,EAAMG,GAAajD,UAAkBuB,GACnCK,KAAMqB,EACNjD,SAAAA,EACAQ,SAAUjB,EAASuD,QAGvBC,UAAgBxB,GACZK,KAAMmB,EACNI,IAAKJ,EACLvC,SAAUjB,EAASuD,OAErBM,EAAiB,IAAIC,YACvB7D,EAAU8D,UACV7B,GAGAqB,IACAA,EAAIJ,KAAOd,EAEXe,EAAQC,YAAYE,GAEpBH,EAAQE,QAAQS,UAAYvD,EAE5B4C,EAAQY,cAAcH,MCChBI,EACFb,QAASN,SAIjBF,yBAAyBP,EAAyB6B,EAAkBC"}