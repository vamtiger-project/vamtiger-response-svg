{"version":3,"file":"vamtiger-responsive-svg.js","sources":["../node_modules/vamtiger-browser-method/source/types.ts","../node_modules/vamtiger-browser-method/source/define-custom-element.ts","../node_modules/vamtiger-browser-method/source/load-script.ts","../source/types.ts","../source/config.ts","../source/css/document-index.ts","../source/get-template.ts","../source/html/index.ts","../node_modules/vamtiger-browser-method/source/get-element-from-url.ts","../source/load-svg.ts","../source/element.ts","../source/vamtiger-responsive-svg.ts"],"sourcesContent":["import * as tslib from '../node_modules/tslib/tslib';\nimport defineCustomElement from './define-custom-element';\n\nexport enum ScriptType {\n    jsonld = 'application/ld+json'\n}\n\nexport enum ScriptAttribute {\n    type = 'type'\n}\n\nexport enum ErrorMessage {\n    failedToLoadScript = 'Failed to load script',\n    windowPropertyNotSet = 'Window property not set',\n    unsupportedFeature = 'Unsupported feature',\n    customElementAreadyDefined = 'Custom element already defined',\n    noElementName = 'No Element Name',\n    noTemplateUrl = 'No Template URL',\n    noElementSelector = 'No Template Selector',\n    noTemplateForUrl = 'No Template for URL',\n    noTemplate = 'No Template',\n    noElementForSelector = 'No Element for Selector'\n}\n\nexport enum StringConstant {\n    slash = '/'\n}\n\nexport enum TagName {\n    div = 'div'\n}\n\nexport enum LinkRel {\n    stylesheet = 'stylesheet'\n}\n\nexport enum LoadScriptElement {\n    script = 'script',\n    link = 'link',\n    style = 'style'\n}\n\nexport enum Selector {\n    lastStylesheet = 'style:last-of-type',\n    webcomponentsjs = 'script[src*=\"@webcomponents\\/webcomponentsjs\"]'\n}\n\nexport interface ILoadRemoteScriptParams {\n    src: string;\n}\n\nexport interface ILoadRemoteStylesheetScriptParams {\n    href: string;\n}\n\nexport interface ILoadLocalScriptParams {\n    name: string;\n}\n\nexport interface ILoadScriptParams {\n    js: string;\n    jsonld?: boolean;\n}\n\nexport interface ILoadStylesheetScriptParams {\n    css: string;\n}\n\nexport interface ILoadScript {\n    params: LocalScriptParams\n        | LocalStylesheetScriptParams\n        | ILoadRemoteScriptParams\n        | ILoadRemoteStylesheetScriptParams;\n    reject: (error: Error) => void\n}\n\nexport interface ILoadShadowStylesheet {\n    css: string;\n    element: HTMLElement;\n}\n\nexport interface IDefineCustomElement {\n    name: string;\n    constructor: {\n        new (): HTMLElement\n        prototype: HTMLElement;\n    };\n    ignore?: boolean;\n}\n\nexport interface IPause {\n    milliseconds: number;\n}\n\nexport interface IGetElementBase {\n    name: string;\n}\n\nexport interface IGetElementTemplate extends IGetElementBase {\n    template: string;\n}\n\nexport interface IGetElementUrl extends IGetElementBase {\n    url: string;\n    selector:  string;\n}\n\nexport type TsLibType = typeof tslib;\n\nexport type TsLibKey = keyof TsLibType;\n\nexport type TsLib = {\n    [K in TsLibKey]: TsLibType[K]\n}\n\nexport type LocalScriptParams = ILoadLocalScriptParams & ILoadScriptParams;\n\nexport type LocalStylesheetScriptParams = ILoadLocalScriptParams & ILoadStylesheetScriptParams;\n\nexport type LoadScriptParams = LocalScriptParams\n    | LocalStylesheetScriptParams\n    | ILoadRemoteScriptParams\n    | ILoadRemoteStylesheetScriptParams;\n\nexport type LoadScriptsParams = LoadScriptParams[];\n\nexport type LoadScriptsSequentiallyParams = LoadScriptsParams[];\n\nexport type LoadedScript<P extends ILoadScript['params']> =\n    P extends ILoadScriptParams ? HTMLScriptElement :\n    P extends ILoadStylesheetScriptParams ? HTMLStyleElement :\n    P extends ILoadRemoteScriptParams ? HTMLScriptElement :\n    P extends ILoadRemoteStylesheetScriptParams ? HTMLLinkElement :\n    never;\n\nexport type LoadedScripts<P extends LoadScriptsParams> =\n    P extends ILoadScriptParams[] ? HTMLScriptElement[] :\n    P extends ILoadStylesheetScriptParams[] ? HTMLStyleElement[] :\n    P extends ILoadRemoteScriptParams[] ? HTMLScriptElement[] :\n    P extends ILoadRemoteStylesheetScriptParams[] ? HTMLLinkElement[] :\n    never;\n\nexport type LoadedScriptsSequentially<P extends LoadScriptsSequentiallyParams> =\n    P extends ILoadScriptParams[][] ? HTMLScriptElement[] :\n    P extends ILoadStylesheetScriptParams[][] ? HTMLStyleElement[] :\n    P extends ILoadRemoteScriptParams[][] ? HTMLScriptElement[] :\n    P extends ILoadRemoteStylesheetScriptParams[][] ? HTMLLinkElement[] :\n    never;\n\nexport type GetElementParams = IGetElementTemplate | IGetElementUrl;\n\ndeclare global {\n    interface Window extends TsLib {\n        VamtigerBrowserMethod: {\n            loadScript: <P extends ILoadScript['params']>(params: P) => Promise<LoadedScript<P>>;\n            loadScripts: <P extends LoadScriptsParams>(params: P) => Promise<LoadedScripts<P>>;\n            loadScriptsSequentially: <P extends LoadScriptsSequentiallyParams>(params: P) => Promise<LoadedScriptsSequentially<P>>;\n            loadShadowStylesheet: (params: ILoadShadowStylesheet) => void;\n            defineCustomElement: (params: IDefineCustomElement) => void;\n            getElement: (params: GetElementParams) => Promise<HTMLElement>;\n            pause: (params: IPause) => Promise<{}>;\n        }\n    }\n\n    namespace NodeJS {\n        interface  Global {\n            VamtigerBrowserMethod: Window['VamtigerBrowserMethod'];\n        }\n    }\n}","import { IDefineCustomElement, ErrorMessage } from './types';\n\nconst { unsupportedFeature, customElementAreadyDefined } = ErrorMessage;\n\nexport default function defineCustomElement({ name, constructor, ignore }: IDefineCustomElement) {\n    const { customElements } = window;\n    const define = customElements && customElements.define;\n    const existingElement = define && customElements.get && customElements.get(name);\n\n    if (define && !existingElement) {\n        customElements.define(name, constructor);\n    } else if (existingElement) {\n        throw new Error(`${customElementAreadyDefined}: ${name}`);\n    } else if (!ignore) {\n        defineCustomElement({ name, constructor, ignore: true });\n    } else {\n        throw new Error(`${unsupportedFeature}: Custom Elements - ${name}`);\n    }\n}","import {\n    ILoadScript,\n    ErrorMessage,\n    LocalScriptParams,\n    LocalStylesheetScriptParams,\n    ILoadRemoteStylesheetScriptParams,\n    ILoadRemoteScriptParams,\n    LoadScriptElement,\n    LoadedScript,\n    LinkRel,\n    ScriptAttribute,\n    ScriptType\n} from './types';\n\nconst { failedToLoadScript } = ErrorMessage;\nconst { stylesheet } = LinkRel;\nconst { script: scriptElement, link, style } = LoadScriptElement;\n\nexport default <P extends ILoadScript['params']>(params: P) => new Promise((resolve: (script: LoadedScript<P>) => void, reject: ILoadScript['reject']) => {\n    const { head, body } = document;\n    const { js, name: scriptName, jsonld } = params as LocalScriptParams;\n    const { src } = params as ILoadRemoteScriptParams;\n    const { css, name: stylesheetName } = params as LocalStylesheetScriptParams;\n    const { href } = params as ILoadRemoteStylesheetScriptParams;\n    const remoteScript = params.hasOwnProperty('src') || params.hasOwnProperty('href');\n    const element = (js || src) && scriptElement\n        || css && style\n        || href && link;\n    const selector = src && `script[src=\"${src}\"]`\n        || href && `link[href=\"${href}\"]`\n        || js && scriptName && `script[data-name=\"${scriptName}\"]`\n        || css && stylesheetName && `style[data-name=\"${stylesheetName}\"]`;\n    const existingScript = (head.querySelector(selector) || body.querySelector(selector)) as LoadedScript<P>;\n    const script = selector\n        && element\n        && document.createElement(element) as LoadedScript<P>;\n\n    if (script instanceof HTMLScriptElement) {\n        if (src) {\n            script.src = src;\n        } else if (js) {\n            script.innerHTML = js;\n            script.dataset.name = scriptName;\n\n            if (jsonld) {\n                script.setAttribute(ScriptAttribute.type, ScriptType.jsonld);\n            }\n        }\n    } else if (script instanceof HTMLLinkElement) {\n        script.rel = stylesheet;\n        script.href = href;\n    } else if (script instanceof HTMLStyleElement) {\n        script.innerHTML = css;\n        script.dataset.name = stylesheetName;\n    }\n\n    if (existingScript) {\n        resolve(existingScript);\n    } else if (script) {\n        head.appendChild(script);\n\n        if (remoteScript) {\n            script.addEventListener('load', handleLoad);\n            script.addEventListener('error', handleLoadError);\n        } else {\n            resolve(script);\n        }\n    }\n\n    function handleLoad(event: Event) {\n        if (script) {\n            script.removeEventListener('load', handleLoad);\n\n            resolve(script);\n        }\n    }\n\n    function handleLoadError(event: Event) {\n        if (script) {\n            script.removeEventListener('error', handleLoadError);\n        }\n\n        console.error(event);\n\n        reject(new Error(`${failedToLoadScript}`));\n    }\n});","import VamtigerResponsiveSvg from './element';\n\nexport enum StringConstant {\n    nothing = ''\n}\n\nexport enum Selector {\n    style = 'style',\n    svg = 'svg',\n    slot = 'slot'\n}\n\nexport enum ObservedAttributes {\n\n}\n\nexport interface IGetTemplate {\n    selector: Selector;\n    attributes?: IAttributes;\n    properties?: IProperties;\n}\n\nexport interface IAttributes {\n    id?: string;\n    for?: string;\n    slot?: string;\n    name?: string;\n}\n\nexport interface IProperties {\n    innerHTML?: string;\n}\n\nexport interface ILoadSvg {\n    element: VamtigerResponsiveSvg;\n}\n\nexport interface IDataset extends DOMStringMap {\n    svg: string;\n}\n\nexport type AttributesKey = keyof IAttributes;\n\nexport type ObservedAttribute = keyof typeof ObservedAttributes;\n\nexport type GetTemplate<P extends IGetTemplate> =\n    P['selector'] extends Selector.style ? HTMLStyleElement :\n    P['selector'] extends Selector.svg ? SVGElement :\n    P['selector'] extends Selector.slot ? HTMLSlotElement :\n    null;","import {\n    ObservedAttributes,\n    ObservedAttribute\n} from './types'\n\nexport const shadowRoot = {\n    mode: 'open'\n} as ShadowRootInit;\n\nexport const observedAttributes = Object.keys(ObservedAttributes) as ObservedAttribute[];","export default `vamtiger-responsive-svg [slot=vamtiger-responsive-svg]{width:100%;height:100%}\n/*# sourceMappingURL=document-index.ts.map */`;","import {\n    IGetTemplate,\n    GetTemplate,\n    StringConstant,\n    AttributesKey\n} from './types';\nimport html from './html';\nimport css from './css';\n\nconst { nothing } = StringConstant;\nconst template = document.createElement('template');\nconst stylesheet = `<style>${css}</style>`\nconst templateHtml = [\n    stylesheet,\n    html\n].join(nothing);\n\ntemplate.innerHTML = templateHtml;\n\nexport default <P extends IGetTemplate>(params: P) => {\n    const {\n        selector,\n        attributes = {},\n        properties = {}\n    } = params;\n    const attributesKeys = Object.keys(attributes) as AttributesKey[]\n    const templateElement = template.content.querySelector(selector);\n    const currentTemplate = templateElement && templateElement.cloneNode(true) as GetTemplate<P>;\n\n    if (currentTemplate) {\n        Object.assign(currentTemplate, properties);\n\n        attributesKeys.forEach(key => attributes[key] && currentTemplate.setAttribute(key, attributes[key] || ''));\n    }\n\n    return currentTemplate;\n};","export default '<slot></slot>';","import {\n    IGetElementUrl,\n    TagName,\n    ErrorMessage\n} from './types';\n\nconst { div } = TagName;\nconst {\n    noElementName,\n    noElementSelector,\n    noTemplateUrl,\n    noTemplateForUrl,\n    noElementForSelector\n} = ErrorMessage;\n\nexport default async function ({ name, url, selector }: IGetElementUrl) {\n    const template = name && selector && url && await fetch(url)\n        .then(response => response.text());\n    const container = template && document.createElement(div);\n\n    let element: HTMLElement | null = null;\n\n    if (!name) {\n        throw new Error(noElementName);\n    } else if (!selector) {\n        throw new Error(noElementSelector);\n    } else if (!url) {\n        throw new Error(noTemplateUrl);\n    } else if (!template) {\n        throw new Error(noTemplateForUrl);\n    }\n\n    if (container) {\n        container.innerHTML = template;\n\n        element = container.querySelector<HTMLElement>(selector);\n    }\n\n    if (!element) {\n        throw new Error(noElementForSelector);\n    }\n\n    element.setAttribute('dataset-name', name);\n\n    return element;\n}\n","import getElement from '../node_modules/vamtiger-browser-method/source/get-element-from-url';\nimport {\n    ILoadSvg,\n    Selector,\n    IDataset,\n    StringConstant\n} from './types';\nimport { name } from './element';\n\nconst { nothing } = StringConstant;\n\nexport default async function ({ element }: ILoadSvg) {\n    const dataset = element.dataset as IDataset;\n    const { svg: url } = dataset;\n    const svg = url && await getElement({\n        name: url,\n        url,\n        selector: Selector.svg\n    });\n\n    if (svg) {\n        svg.slot = name;\n\n        element.appendChild(svg);\n\n        element.dataset.loaded = nothing;\n    }\n\n}","import loadScript from '../node_modules/vamtiger-browser-method/source/load-script';\nimport {\n    Selector,\n    ObservedAttribute\n} from './types';\nimport {\n    shadowRoot as shadowRootConfig,\n    observedAttributes\n} from './config';\nimport css from './css/document-index';\nimport getTemplate from './get-template';\nimport loadSvg from './load-svg';\n\nexport const name = 'vamtiger-responsive-svg';\n\ncss && loadScript({ name, css })\n    .catch(console.error);\n\nexport default class VamtigerResponsiveSvg extends HTMLElement {\n    constructor() {\n        super();\n\n        const shadowRoot = this.attachShadow(shadowRootConfig);\n        const stylesheet = getTemplate({\n            selector: Selector.style\n        });\n        const slot = getTemplate({\n            selector: Selector.slot,\n            attributes: {\n                name\n            }\n        });\n        const elements = [\n            stylesheet,\n            slot\n        ];\n\n        elements.forEach(element => element && shadowRoot.appendChild(element));\n    }\n\n    static get observedAttributes() {\n        return observedAttributes;\n    }\n\n    async connectedCallback() {\n        await loadSvg({\n            element: this\n        });\n    }\n\n    attributeChangedCallback(name: ObservedAttribute, oldValue: string, newValue: string) {\n\n    }\n}","import defineCustomElement from '../node_modules/vamtiger-browser-method/source/define-custom-element';\nimport constructor, { name } from './element';\n\ndefineCustomElement({\n    name,\n    constructor\n});"],"names":["ScriptType","ScriptAttribute","ErrorMessage","StringConstant","TagName","LinkRel","LoadScriptElement","Selector","unsupportedFeature","customElementAreadyDefined","failedToLoadScript","stylesheet","script","scriptElement","link","style","ObservedAttributes","shadowRoot","mode","observedAttributes","Object","keys","nothing","template","document","createElement","templateHtml","join","innerHTML","params","selector","attributes","properties","attributesKeys","templateElement","content","querySelector","currentTemplate","cloneNode","assign","forEach","key","setAttribute","div","noElementName","noElementSelector","noTemplateUrl","noTemplateForUrl","noElementForSelector","element","dataset","svg","url","name","fetch","then","response","text","container","Error","getElement","slot","appendChild","loaded","Promise","resolve","reject","head","body","js","scriptName","jsonld","src","css","stylesheetName","href","remoteScript","hasOwnProperty","existingScript","HTMLScriptElement","type","HTMLLinkElement","rel","HTMLStyleElement","addEventListener","handleLoad","event","removeEventListener","handleLoadError","console","error","loadScript","catch","defineCustomElement","constructor","ignore","customElements","window","define","existingElement","get","HTMLElement","[object Object]","super","this","attachShadow","shadowRootConfig","getTemplate","loadSvg","oldValue","newValue"],"mappings":"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"}